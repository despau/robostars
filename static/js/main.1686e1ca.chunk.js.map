{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardComponent","robos","map","robo","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","requestRobos","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobos","searchField","onSearchChange","isPending","filteredRobos","filter","toLowerCase","includes","connect","searchRobos","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobos","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1686e1ca.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={name} src ={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robos}) => {\r\n\r\n    // if (true) {\r\n    //     throw new Error('NOOOOOOO')\r\n    // }\r\n\r\n    const cardComponent = robos.map( robo => {\r\n        return <Card \r\n                    key={robo.id} \r\n                    id={robo.id} \r\n                    name={robo.name} \r\n                    email={robo.email} \r\n                />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) =>{\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robos'\r\n                className='pa2 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='Search Robos'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '900px'}}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch({ error, info }) {\r\n        this.setState({ hasError: true})\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Oooops! That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import { apiCall } from './api/api'\r\n\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOS_PENDING,\r\n    REQUEST_ROBOS_SUCCESS,\r\n    REQUEST_ROBOS_FAILURE\r\n } from './constants.js';\r\n\r\n\r\n //SEARCHFIELD\r\n\r\n //setSearchField returns an action\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\n\r\n//ROBOS\r\n\r\n//requestRobos returns a function\r\nexport const requestRobos = () => ( dispatch ) => {\r\n    dispatch({ type: REQUEST_ROBOS_PENDING })\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n      .then( data => dispatch({\r\n          type: REQUEST_ROBOS_SUCCESS,\r\n          payload: data\r\n        }))\r\n      .catch( error => dispatch({\r\n        type: REQUEST_ROBOS_FAILURE,\r\n        payload: error\r\n    }));\r\n};\r\n\r\n//------------------------------------------\r\n\r\n// export const requestRobots = (dispatch) => {\r\n//   dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n//   apiCall('https://jsonplaceholder.typicode.com/users')\r\n//     .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n//     .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n// }\r\n\r\n//-----------------------------------------------\r\n\r\n\r\n\r\n//----------------------------------------\r\n\r\n// fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\r\n//   return response.json();\r\n// }).then( data => dispatch({\r\n//   type: REQUEST_ROBOS_SUCCESS,\r\n//   payload: data\r\n// })).catch( error => dispatch({\r\n//     type: REQUEST_ROBOS_FAILURE,\r\n//     payload: error\r\n// }));\r\n\r\n//-----------------------------------------\r\n\r\n// export const requestRobos = (  ) => ({\r\n\r\n// });\r\n\r\n// export const requestRobos = (  ) => ({\r\n\r\n// });\r\n\r\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOS_PENDING = 'REQUEST_ROBOS_PENDING';\r\nexport const REQUEST_ROBOS_SUCCESS = 'REQUEST_ROBOS_SUCCESS';\r\nexport const REQUEST_ROBOS_FAILURE = 'REQUEST_ROBOS_FAILURE';","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundry from '../components/ErrorBoundry.js'\n\nimport { setSearchField, requestRobos } from '../actions.js';\n\n//\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobos.searchField,\n    robos: state.requestRobos.robos,\n    isPending: state.requestRobos.isPending,\n    error: state.requestRobos.error\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobos: () => dispatch(requestRobos())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobos();\n  }\n\n  render() {\n\n    const { searchField, onSearchChange, robos, isPending } = this.props;\n\n    const filteredRobos = robos.filter(robo => {\n      //return on this condition true\n      return robo.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if(isPending) {\n      return <h1>Loading...</h1>\n    }else {\n      return (\n        <div className=\"tc tc bg-black\">\n          <h1 className='white'>This is the App</h1>\n            <SearchBox searchChange={onSearchChange} />\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robos={filteredRobos}/>\n              </ErrorBoundry>\n            </Scroll>\n        </div>\n      );\n    } \n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOS_PENDING,\r\n    REQUEST_ROBOS_SUCCESS,\r\n    REQUEST_ROBOS_FAILURE\r\n } from './constants.js';\r\n\r\n\r\n\r\n //STATE SEARCHFIELD\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\n//SEARCHFIELD\r\nexport const searchRobos = ( state=initialStateSearch, action={} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // return { ...state, searchField: action.payload }\r\n            return Object.assign( {}, state, { searchField: action.payload } );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n //STATE ROBOS\r\n const initialStateRobos = {\r\n    isPending: false,\r\n    robos: [],\r\n    error: ''\r\n}\r\n\r\n\r\n//ROBOS\r\nexport const requestRobos = ( state=initialStateRobos, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOS_PENDING:\r\n            return Object.assign( {}, state, { isPending: true } );\r\n        case REQUEST_ROBOS_SUCCESS:\r\n            return Object.assign( {}, state, { robos: action.payload, isPending: false} );\r\n        case REQUEST_ROBOS_FAILURE:\r\n            return Object.assign( {}, state, { error: action.payload, isPending: false} )\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker.js';\nimport { searchRobos, requestRobos } from './reducers.js';\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n  searchRobos,\n  requestRobos\n})\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}